{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get the Badger working! Let's discover Task Badger in less than 5 minutes . Creating a task Creating a task is very simple. Make a POST request to the API with the task data. shell $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"name\": \"demo task\"}' The response will include the task ID which is needed for updating the task. Response { \"id\" : \"{task-id}\" , \"organization\" : \"{organization}\" , \"project\" : \"{project}\" , \"name\" : \"demo task\" , \"status\" : \"pending\" , \"value\" : null , \"data\" : null , \"created\" : \"2022-09-22T06:53:40.683555Z\" , \"updated\" : \"2022-09-22T06:53:40.683555Z\" } The task will now be listed in the task list: https://taskbadger.net/a/{organization}/tasks/. Update task progress Here we update the task status and value . By default, a task's value can range from 0 to 100. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"status\": \"processing\", \"value\": 5}' Add an action to the task Here we update create a new action for the task so that we get notified when the task completes. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"actions\":[{\"integration\":\"email\",\"trigger\":\"success,error\",\"config\":{\"to\":\"me@example.com\"}}]}' Mark the task complete When the task is complete update the status to either success or error . The value may also be updated to 100. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"status\": \"success\", \"value\": 100}' Also check your email to see if you got the notification.","title":"Quick Start"},{"location":"#get-the-badger-working","text":"Let's discover Task Badger in less than 5 minutes .","title":"Get the Badger working!"},{"location":"#creating-a-task","text":"Creating a task is very simple. Make a POST request to the API with the task data. shell $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"name\": \"demo task\"}' The response will include the task ID which is needed for updating the task. Response { \"id\" : \"{task-id}\" , \"organization\" : \"{organization}\" , \"project\" : \"{project}\" , \"name\" : \"demo task\" , \"status\" : \"pending\" , \"value\" : null , \"data\" : null , \"created\" : \"2022-09-22T06:53:40.683555Z\" , \"updated\" : \"2022-09-22T06:53:40.683555Z\" } The task will now be listed in the task list: https://taskbadger.net/a/{organization}/tasks/.","title":"Creating a task"},{"location":"#update-task-progress","text":"Here we update the task status and value . By default, a task's value can range from 0 to 100. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"status\": \"processing\", \"value\": 5}'","title":"Update task progress"},{"location":"#add-an-action-to-the-task","text":"Here we update create a new action for the task so that we get notified when the task completes. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"actions\":[{\"integration\":\"email\",\"trigger\":\"success,error\",\"config\":{\"to\":\"me@example.com\"}}]}'","title":"Add an action to the task"},{"location":"#mark-the-task-complete","text":"When the task is complete update the status to either success or error . The value may also be updated to 100. shell Request $ curl -X POST https://taskbadger.net/api/ { organization } / { project } /tasks/ { task-id } / \\ -H \"Authorization: Bearer $API_KEY \" \\ -H \"Content-Type: application/json\" \\ -d '{\"status\": \"success\", \"value\": 100}' Also check your email to see if you got the notification.","title":"Mark the task complete"},{"location":"api/","text":"All tasks (and related data) is associated with a single project. The base task URL is: /api/{organization}/{project}/tasks Action Endpoint List tasks GET /api/{org}/{project}/tasks Create task POST /api/{org}/{project}/tasks Get task details GET /api/{org}/{project}/tasks/{task_id} Update task POST /api/{org}/{project}/tasks/{task_id} Cancel task DELETE /api/{org}/{project}/tasks/{task_id} List task actions GET /api/{org}/{project}/tasks/{task_id}/actions Add task action POST /api/{org}/{project}/tasks/{task_id}/actions (alternately POST to 'update task' endpoint with {\"actions\": [...]}) Update task action POST /api/{org}/{project}/tasks/{task_id}/actions/{action_id} Cancel task action DELETE /api/{org}/{project}/tasks/{task_id}/actions/{action_id} Full details of the API endpoints can be viewed at https://taskbadger.net/api/docs/","title":"API Endpoints"},{"location":"basics/","text":"Using the Task Badger API Organization and Project API endpoints include both the organization and project slug. The user authenticating the request must have access to both for the request to be accepted. Authentication Requests must be authenticated by providing a bearer token provided in the Authentication header. 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/json {\"name\":\"demo task\",\"status\":\"pending\"} POST Bodies The payload of HTTP POST requests may be specified as either standard POST parameters or JSON. URL-encoded bodies When sending URL-encoded data, the HTTP Content-Type header should be set to application/x-www-form-urlencoded . For example: 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/x-www-form-urlencoded name=demo%20task&status=pending JSON-encoded bodies POST data may also be sent in JSON-encoded format. The Content-type HTTP header must be set to application/json Without this header the data won't be interpreted as JSON. For example: 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/json {\"name\":\"demo task\",\"status\":\"pending\"} Pagination List requests use cursor pagination. Each request will include a next and previous field. These may be null indicating that is no next or previous page but will otherwise contain the full URL of the page. The cursors can be used to navigate forwards or backwards through the data. For example: GET https://taskbadger.net/api/{organization}/{project}/tasks/?page_size=2 This will respond with tasks in pages of size 2: { \"previous\" : null , \"next\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=XXX&page_size=2\" , \"results\" : [{ ... }, { ... }] } To access the next page of data make a request to the URL provided in the next field: GET https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=XXX&page_size=2 The response will now include both next and previous page URLs. { \"previous\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=YYY&page_size=2\" , \"next\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=ZZZ&page_size=2\" , \"results\" : [{ ... }, { ... }] } Tip The page_size parameter can be changed at any point to adjust the page size of the request. Rate Limiting Rate limits are applied to API requests based on the Organization subscription plan. Requests that have been rate limited will respond as follows: 1 2 HTTP/1.1 429 Too Many Requests Retry-After: 30 OpenAPI Specification The Task Badger API includes an endpoint for downloading the OpenAPI 2.0 specification which describes the requests and responses. Download the spec from taskbadger.net","title":"Using the API"},{"location":"basics/#using-the-task-badger-api","text":"","title":"Using the Task Badger API"},{"location":"basics/#organization-and-project","text":"API endpoints include both the organization and project slug. The user authenticating the request must have access to both for the request to be accepted.","title":"Organization and Project"},{"location":"basics/#authentication","text":"Requests must be authenticated by providing a bearer token provided in the Authentication header. 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/json {\"name\":\"demo task\",\"status\":\"pending\"}","title":"Authentication"},{"location":"basics/#post-bodies","text":"The payload of HTTP POST requests may be specified as either standard POST parameters or JSON.","title":"POST Bodies"},{"location":"basics/#url-encoded-bodies","text":"When sending URL-encoded data, the HTTP Content-Type header should be set to application/x-www-form-urlencoded . For example: 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/x-www-form-urlencoded name=demo%20task&status=pending","title":"URL-encoded bodies"},{"location":"basics/#json-encoded-bodies","text":"POST data may also be sent in JSON-encoded format. The Content-type HTTP header must be set to application/json Without this header the data won't be interpreted as JSON. For example: 1 2 3 4 POST https://taskbadger.net/api/{organization}/{project}/tasks/ Authorization: Bearer xxxx Content-type: application/json {\"name\":\"demo task\",\"status\":\"pending\"}","title":"JSON-encoded bodies"},{"location":"basics/#pagination","text":"List requests use cursor pagination. Each request will include a next and previous field. These may be null indicating that is no next or previous page but will otherwise contain the full URL of the page. The cursors can be used to navigate forwards or backwards through the data. For example: GET https://taskbadger.net/api/{organization}/{project}/tasks/?page_size=2 This will respond with tasks in pages of size 2: { \"previous\" : null , \"next\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=XXX&page_size=2\" , \"results\" : [{ ... }, { ... }] } To access the next page of data make a request to the URL provided in the next field: GET https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=XXX&page_size=2 The response will now include both next and previous page URLs. { \"previous\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=YYY&page_size=2\" , \"next\" : \"https://taskbadger.net/api/{organization}/{project}/tasks/?cursor=ZZZ&page_size=2\" , \"results\" : [{ ... }, { ... }] } Tip The page_size parameter can be changed at any point to adjust the page size of the request.","title":"Pagination"},{"location":"basics/#rate-limiting","text":"Rate limits are applied to API requests based on the Organization subscription plan. Requests that have been rate limited will respond as follows: 1 2 HTTP/1.1 429 Too Many Requests Retry-After: 30","title":"Rate Limiting"},{"location":"basics/#openapi-specification","text":"The Task Badger API includes an endpoint for downloading the OpenAPI 2.0 specification which describes the requests and responses. Download the spec from taskbadger.net","title":"OpenAPI Specification"},{"location":"data_model/","text":"Task Badgers' Data Model Tip Download the OpenAPI schema from https://taskbadger.net/api/schema.json Task Naturally, the Task is the core data model for Task Badger. Almost all operations are related to a task. Every Task must belong to a Project . You can think of a project as a single 'system' or piece of software. Assigning tasks to a Project is useful when it comes to data segregation and metrics. Tasks have three main attributes: name Each task should have a name which identifies the type of task, not necessarily the specific instance of the task. For example, account.export_transactions may be the name of a task that is executed to compile a data export for download. status The status of the task indices where it is in the task lifecycle value The value of a task indicates its progress in the processing state. By default, the value range is from 0 to 100. This attribute is you can track a tasks active progress. Example Task { \"id\" : \"57ae8eVBrH7jbDgmYj6Ut2vR9S\" , \"organization\" : \"example_org\" , \"project\" : \"example_project\" , \"name\" : \"example task\" , \"status\" : \"processing\" , \"value\" : 42 , \"data\" : { \"property1\" : \"customValue\" }, \"created\" : \"2022-08-24T14:15:22Z\" , \"updated\" : \"2022-08-24T16:15:22Z\" } Task Lifecycle The potential lifecycle of a task has 4 incremental states and 3 terminal states. A task would usually only ever take on one terminal state and may use any or all of the incremental states. flowchart LR p(Pending) --> prep(Pre-Processing) prep --> pro(fa:fa-ban Processing) pro --> post(fab:fa-twitter Post-Processing) post --> s(Success) style p stroke-dasharray: 5 5 style pro stroke-width:2px style s stroke-width:2px c(Cancelled) e(Error) Here are some examples: Manual data migration The data migration script is executed from the command line by an operator. Immediately on starting it creates a task in the processing state with a value of 0 . The script iterates through rows from a database query and performs some action with each. At regular intervals the script updates the task with its progress by updating the value attribute. Upon completion the script updates the task status to success . User initiated data export A user makes a request for data via a web UI. A request is made to Task Badger to create a task record in the pending state. The task ID and other parameters are placed in a queue. The user is then directed to a UI which shows the task status and progress. On the backend a task worker receives the task from the queue and executes the export function. The export function updates the Task Badger task state to processing and the value to 0 before starting the export. During the data export the export function regularly updates the task progress which is also displayed on the UI for the user. Once the export is compiled the export function updates the task value to 100 and the state to post_processing . During this time the export function uploads the compiled export to S3. Once the upload is complete the task status is updated to success and the user is presented with an option to download the export. At any point during this process the user may press Cancel on the UI which will update the task status. The backed export function could check the task state periodically and exit early. Task state detail Initial states pending Prior to starting execution a task may be in pending state. This typically happens while a task is waiting in a queue before being selected for execution by a task worker. Execution states pre_processing In this state a task has not yet begun iterating through its dataset, but it may be doing preliminary work. For example, loading data from a file prior to iterating. processing This is the main state of a task during which it is iterating through the data and incrementing its progress as it goes by updating its value . post_processing Having completed processing a task may perform additional work to clean up or finalize the task. Terminal states These states are mutually exclusive, once a task reaches one of these states it is not expected to be modified again. success The task has completed successfully. Typically, a task would move to this state from the processing or post_processing state. error The task has errored. A task may take on this state at any point. cancelled The task has been cancelled. A task may take on this state at any point. Task Actions Actions are at the core of Task Badger's secret sauce. They allow you to send notifications, perform callouts, and more based on task events. Every action specifies an integration e.g. email , and a trigger definition which is like a crontab expression, but for tasks. For example, */25%,success means, \"execute this action when the task value passes 25%, 50%, 75%, 100% and when the task status is set to success \". A task may have multiple actions, each with their own integration and trigger definition. Here is an example of an action: { \"id\" : 640 , \"task\" : \"57ae8eVBrH7jbDgmYj6Ut2vR9S\" , \"trigger\" : \"success,error\" , \"integration\" : \"email\" , \"status\" : \"active\" , \"config\" : { \"to\" : \"me@example.com,you@example.com\" }, \"created\" : \"2022-11-16T07:10:30.551808Z\" , \"updated\" : \"2022-11-16T07:10:30.551818Z\" } Action Edge cases If a task value or status skips past multiple trigger points, only the last matching trigger will be executed. For example, an action configured with 20,40,80 whose value goes from 0 directly to 90 will skip over the 20 and 40 events and only fire the 80 event. This also applies to task status triggers.","title":"Data Model"},{"location":"data_model/#task-badgers-data-model","text":"Tip Download the OpenAPI schema from https://taskbadger.net/api/schema.json","title":"Task Badgers' Data Model"},{"location":"data_model/#task","text":"Naturally, the Task is the core data model for Task Badger. Almost all operations are related to a task. Every Task must belong to a Project . You can think of a project as a single 'system' or piece of software. Assigning tasks to a Project is useful when it comes to data segregation and metrics. Tasks have three main attributes: name Each task should have a name which identifies the type of task, not necessarily the specific instance of the task. For example, account.export_transactions may be the name of a task that is executed to compile a data export for download. status The status of the task indices where it is in the task lifecycle value The value of a task indicates its progress in the processing state. By default, the value range is from 0 to 100. This attribute is you can track a tasks active progress.","title":"Task"},{"location":"data_model/#example-task","text":"{ \"id\" : \"57ae8eVBrH7jbDgmYj6Ut2vR9S\" , \"organization\" : \"example_org\" , \"project\" : \"example_project\" , \"name\" : \"example task\" , \"status\" : \"processing\" , \"value\" : 42 , \"data\" : { \"property1\" : \"customValue\" }, \"created\" : \"2022-08-24T14:15:22Z\" , \"updated\" : \"2022-08-24T16:15:22Z\" }","title":"Example Task"},{"location":"data_model/#task-lifecycle","text":"The potential lifecycle of a task has 4 incremental states and 3 terminal states. A task would usually only ever take on one terminal state and may use any or all of the incremental states. flowchart LR p(Pending) --> prep(Pre-Processing) prep --> pro(fa:fa-ban Processing) pro --> post(fab:fa-twitter Post-Processing) post --> s(Success) style p stroke-dasharray: 5 5 style pro stroke-width:2px style s stroke-width:2px c(Cancelled) e(Error) Here are some examples: Manual data migration The data migration script is executed from the command line by an operator. Immediately on starting it creates a task in the processing state with a value of 0 . The script iterates through rows from a database query and performs some action with each. At regular intervals the script updates the task with its progress by updating the value attribute. Upon completion the script updates the task status to success . User initiated data export A user makes a request for data via a web UI. A request is made to Task Badger to create a task record in the pending state. The task ID and other parameters are placed in a queue. The user is then directed to a UI which shows the task status and progress. On the backend a task worker receives the task from the queue and executes the export function. The export function updates the Task Badger task state to processing and the value to 0 before starting the export. During the data export the export function regularly updates the task progress which is also displayed on the UI for the user. Once the export is compiled the export function updates the task value to 100 and the state to post_processing . During this time the export function uploads the compiled export to S3. Once the upload is complete the task status is updated to success and the user is presented with an option to download the export. At any point during this process the user may press Cancel on the UI which will update the task status. The backed export function could check the task state periodically and exit early.","title":"Task Lifecycle"},{"location":"data_model/#task-state-detail","text":"","title":"Task state detail"},{"location":"data_model/#initial-states","text":"pending Prior to starting execution a task may be in pending state. This typically happens while a task is waiting in a queue before being selected for execution by a task worker.","title":"Initial states"},{"location":"data_model/#execution-states","text":"pre_processing In this state a task has not yet begun iterating through its dataset, but it may be doing preliminary work. For example, loading data from a file prior to iterating. processing This is the main state of a task during which it is iterating through the data and incrementing its progress as it goes by updating its value . post_processing Having completed processing a task may perform additional work to clean up or finalize the task.","title":"Execution states"},{"location":"data_model/#terminal-states","text":"These states are mutually exclusive, once a task reaches one of these states it is not expected to be modified again. success The task has completed successfully. Typically, a task would move to this state from the processing or post_processing state. error The task has errored. A task may take on this state at any point. cancelled The task has been cancelled. A task may take on this state at any point.","title":"Terminal states"},{"location":"data_model/#task-actions","text":"Actions are at the core of Task Badger's secret sauce. They allow you to send notifications, perform callouts, and more based on task events. Every action specifies an integration e.g. email , and a trigger definition which is like a crontab expression, but for tasks. For example, */25%,success means, \"execute this action when the task value passes 25%, 50%, 75%, 100% and when the task status is set to success \". A task may have multiple actions, each with their own integration and trigger definition. Here is an example of an action: { \"id\" : 640 , \"task\" : \"57ae8eVBrH7jbDgmYj6Ut2vR9S\" , \"trigger\" : \"success,error\" , \"integration\" : \"email\" , \"status\" : \"active\" , \"config\" : { \"to\" : \"me@example.com,you@example.com\" }, \"created\" : \"2022-11-16T07:10:30.551808Z\" , \"updated\" : \"2022-11-16T07:10:30.551818Z\" }","title":"Task Actions"},{"location":"data_model/#action-edge-cases","text":"If a task value or status skips past multiple trigger points, only the last matching trigger will be executed. For example, an action configured with 20,40,80 whose value goes from 0 directly to 90 will skip over the 20 and 40 events and only fire the 80 event. This also applies to task status triggers.","title":"Action Edge cases"},{"location":"integrations/","text":"Integrations Task Badger integrations are what power the actions. When an action is triggered it causes the specified integration to execute. Each action specifies the integration ID as well as a set of configuration used by the integration. Email Send an email to a set of recipients with the current status of the task. Integration ID : email Configuration Parameter Description to Comma-separated list of recipient email addresses. Max 5.","title":"Integrations"},{"location":"integrations/#integrations","text":"Task Badger integrations are what power the actions. When an action is triggered it causes the specified integration to execute. Each action specifies the integration ID as well as a set of configuration used by the integration.","title":"Integrations"},{"location":"integrations/#email","text":"Send an email to a set of recipients with the current status of the task. Integration ID : email Configuration Parameter Description to Comma-separated list of recipient email addresses. Max 5.","title":"Email"}]}